(base) C:\Users\huangbo>python
Python 3.8.3 (default, Jul  2 2020, 17:30:36) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> # -*- coding: utf-8 -*-
>>> # 使用CART进行MNIST手写数字分类
>>> from sklearn.model_selection import train_test_split
>>> from sklearn import preprocessing
>>> from sklearn.metrics import accuracy_score
>>> from sklearn.datasets import load_digits
>>> from sklearn import tree
>>> import matplotlib.pyplot as plt
>>>
>>> # 加载数据
>>> digits = load_digits()
>>> data = digits.data
>>> # 数据探索
>>> print(data.shape)
(1797, 64)
>>> # 查看第一幅图像
>>> print(digits.images[0])
[[ 0.  0.  5. 13.  9.  1.  0.  0.]
 [ 0.  0. 13. 15. 10. 15.  5.  0.]
 [ 0.  3. 15.  2.  0. 11.  8.  0.]
 [ 0.  4. 12.  0.  0.  8.  8.  0.]
 [ 0.  5.  8.  0.  0.  9.  8.  0.]
 [ 0.  4. 11.  0.  1. 12.  7.  0.]
 [ 0.  2. 14.  5. 10. 12.  0.  0.]
 [ 0.  0.  6. 13. 10.  0.  0.  0.]]
>>> # 第一幅图像代表的数字含义
>>> print(digits.target[0])
0
>>> # 将第一幅图像显示出来
>>> plt.gray()
>>> plt.title('Handwritten Digits')
Text(0.5, 1.0, 'Handwritten Digits')
>>> plt.imshow(digits.images[0])
<matplotlib.image.AxesImage object at 0x000001C69B6E3EE0>
>>> plt.show()
>>>
>>> # 分割数据，将25%的数据作为测试集，其余作为训练集
>>> train_x, test_x, train_y, test_y = train_test_split(data, digits.target, test_size=0.25, random_state=33)
>>>
>>> # 采用Z-Score规范化
>>> ss = preprocessing.StandardScaler()
>>> train_ss_x = ss.fit_transform(train_x)
>>> test_ss_x = ss.transform(test_x)
>>>
>>> # 创建CART分类器
>>> clf = tree.DecisionTreeClassifier()
>>> clf.fit(train_ss_x, train_y)
DecisionTreeClassifier()
>>> predict_y=clf.predict(test_ss_x)
>>> print('CART准确率: %0.4lf' % accuracy_score(predict_y, test_y))
CART准确率: 0.8444
>>>   